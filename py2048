
import random
import copy

#temp. variable
n = int(input("Enter the winning no\n"))
boardSize = int(input("Enter the size of board\n"))

board = [ ]#new board
for i in range(boardSize):
	row = [ ]
	for j in range(boardSize):
		row.append(0)
	board.append(row)

numNeeded = 2# Fill two spot with 2, to start the game
while numNeeded > 0:
	rowNum = random.randint( 0, boardSize - 1)
	colNum = random.randint( 0, boardSize - 1)
		
	if board[ rowNum ][ colNum ] == 0:
		board[ rowNum ][ colNum ] = 2 #pickNewValue
		numNeeded -= 1


def display( ):#display the current board

	list= [ ]#find out the largest value in the list
	for row in board:
		list.append(max(row))
	largest=max(list)	
	#set the max. no. of spaces needed to the length of the largest value
	numSpace = len(str(largest))	
	for row in board:
		currRow = "|"
		for element in row:
			#if the current element is 0, add a space
			if element==0:
				currRow+= " " * numSpace  + "|"
			else:
				currRow+=(" " * ( numSpace - len(str(element)))) + str(element) + "|"		
		#print the generated row
		print(currRow)
	print()	
display()

def mergeOneRowL(row):#merge left
	#move everything as far to the left as possible
	for j in range(boardSize - 1):
		for i in range(boardSize - 1, 0, -1):
			#test if there is an empty space, move over if so 
			if row[ i - 1 ] == 0:
				row[ i - 1 ] = row[ i ]
				row[ i ] = 0
	
	# merge everything to the left
	for  i in range(boardSize - 1):
		#Test if the current value is identical to the one next to it 
		if row[ i ] == row[ i + 1 ]:
			row[ i ]  *= 2
			row[ i + 1 ] = 0
		
	#move everything to the left  again
	for i in range(boardSize - 1, 0, -1):
		if row[ i - 1 ] == 0:
			row[ i - 1 ] = row[ i ]
			row[ i ]=0
	return row

def merge_left(currentBoard):#merge whole board to the left
	for i in range(boardSize):#merge very element in the board
		currentBoard[ i ] = mergeOneRowL(currentBoard[ i ])
	return currentBoard

def reverse(row):#reverse the row
	#Add all elements of the a new list, in reverse order
	new = []
	for i in range(boardSize - 1, -1 , -1):
		new.append(row[ i ])
	return new
	
def merge_right( currentBoard ):#merge right
	for i in range(boardSize):#for every row
		# Reverse the row, merge to the left, then reverse back
		currentBoard[ i ] = reverse(currentBoard[ i ])
		currentBoard[ i ] = mergeOneRowL(currentBoard[ i ])
		currentBoard[ i ] = reverse( currentBoard[ i ])
	return currentBoard

def transpose(currentBoard):#Transpose the board
	for j in range(boardSize):
		for i in range( j, boardSize):
			if i != j :
				temp = currentBoard[ i ][ j ]
				currentBoard[ i ][ j ] = currentBoard[ j ][ i ]
				currentBoard[ j ][ i ] = temp
	return currentBoard
	
def merge_up(currentBoard):#merge up
	#Transpose the whole board, merges it all left, then transpose it back
	currentBoard = transpose(currentBoard)
	currentBoard = merge_left(currentBoard)
	currentBoard = transpose(currentBoard)	
	return currentBoard

def merge_down(currentBoard):#merge down
	#Transpose the whole board, merges it all right, then transpose back
	currentBoard = transpose(currentBoard)
	currentBoard = merge_right(currentBoard)
	currentBoard = transpose(currentBoard)	
	return currentBoard

def addNewValue( ):#adding new value in empty space
	rowNum = random.randint( 0, boardSize - 1)
	colNum = random.randint( 0, boardSize - 1)	
	
	while not board[ rowNum][ colNum] == 0:#pick empty space
		rowNum= random.randint( 0, boardSize - 1)
		colNum = random.randint( 0, boardSize - 1)
	#Fill the empty spot with a new value
	board[ rowNum][ colNum ] = 2	

def won():
	for row  in board:
		if n in row:
			return True

def noMoves():
	currentBoard1 =  copy.deepcopy(board)
	currentBoard2 =  copy.deepcopy(board)
	
	currentBoard1 = merge_left(currentBoard1)
	if currentBoard1 == currentBoard2:
		currentBoard1 = merge_right(currentBoard1)
		if currentBoard1 == currentBoard2:
			currentBoard1 = merge_up(currentBoard1)
			if currentBoard1 == currentBoard2:
				currentBoard1 = merge_down(currentBoard1)
				return True
				

gameOver = False
while not gameOver:# repeat asking the user for new moves while gamenot over
	move = input("Which way do you want to merge? ")
	
	validInput = True
	tempBoard = copy.deepcopy(board)	
	
	if move == "d" :#taking inputs from the user
		board = merge_right(board)
	elif move == "w":
		board = merge_up(board)
	elif move == "a":
		board = merge_left(board)
	elif move == "s" :
		board = merge_down(board)
	else:
		validInput = False
	
	if not validInput:#if the input is not valid
		print("Your input was not valid, please try again")
	else:
		if board == tempBoard:#no merge remain
				print("Try a different direction!")
		else:
			if won():
				display()
				print("won")
				gameOver = True
			else:
				addNewValue( )
				display( )
				
			if noMoves():
				display()
				print("no moves left ")
				gameOver = True
			
	
	
	
	
	
	



